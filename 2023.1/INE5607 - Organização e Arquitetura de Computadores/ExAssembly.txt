#####################################################################
# EXERCÍCIO 1
#####################################################################
.text # Define o início do Text Segment
.globl main # Define o início do código do usuário

main: # Label que define o início do código do usuário
li $s0, 10    # $s0 = x = 10
li $s1, 20    # $s1 = y = 20
li $s2, 30    # $s2 = z = 30

# x = ((x+300) – y) + z + 27 + x

#add $s0, $s1, $s2 #x = s0, y = s1, z = s

addi $t0, $s0, 300 #$t0 = x + 300

sub $t0, $t0, $s1 #st0 = st0 - s1, ou seja, st0 = (x+300) - y

add $t0, $t0, $s2 #st0 = st0 + s2, ou seja, st0 = ((x+300)-y) + z

addi $t0, $t0, 27 #st0 = st0 + 27

add $s0, $t0, $s0 #x = (((x+300)-y) + z + 27) + x


#####################################################################
# EXERCÍCIO 2
#####################################################################
#s = (a & b) | (!a & c)
#s = (a E b) OU (não a E c)

# $s0 = s | $s1 = a | $s2 = b | $s3 = c 
# $t0 | $t1 | $t2 #registradores temporarios

.text # Define o início do Text Segment
.globl main # Define o início do código do usuário
#li $s1,1 
#li $s2,1
#li $s3,0
main: # Label que define o início do código do usuário

and $t1, $s1, $s2

nor $t3, $s1, $zero

and $t2, $t3, $s3

or $s0, $t1, $t2


#####################################################################
# EXERCÍCIO 3
#####################################################################
# Valor = 4*(a+b+c+d)
# Usar $sx para as variáveis em ordem
# Valor vai para $v0

.text # Define o início do Text Segment
.globl main # Define o início do código do usuário
# $s0 = a, $s1 = b, $s2 = c, $s3 = d
main:
#li $s0, 1 #carrega as variáveis com valores
#li $s1, 2
#li $s2, 3
#li $s3, 4
#li $s4, 4 #registrador que contem o multipllicador

add $s0, $s0, $s1 #a = a + b
add $s0, $s0, $s2 #a = a + c
add $s0, $s0, $s3 #a = a + d

mul $v0, $s4, $s0 #v0 = 4 * a


#####################################################################
# EXERCÍCIO 4
#####################################################################
# Vetor[0] = Vetor[1+Vetor[2]]

# Considere que o endereço de vetor está armazenado em $s4
#	exemplo slide:
#	lw $t0, 4($s5)    -> A[1]
#	add $t1, $t0, $s0 -> A[2] recebe A[1] + i
#	sw $t1, 8($s5)    -> salva vetor A[2] no registrador $s5

#.data
#vetor: .word 0, 0, 2, 3, 4, 5, 6, 7, 8, 9 # Vetor de 10 elementos

.text 
.globl main 

main:
#la $s4, vetor # Carregar endereço de 'vetor' em $s4
lw $t0, 8($s4) 			# vetor[2]
addiu $t0, $t0, 1 		# 1 + vetor[2]
sll $t0, $t0, 2 		
add $t1, $s4, $t0		
lw $t2, 0($t1)			#vetor[1 + vetor[2]]
sw $t2, 0($s4)			#vetor[0] = vetor[1 + vetor[2]]


#####################################################################
# EXERCÍCIO 5
#####################################################################
#Considere a seguinte situação:
#$t8 = 0x00BADBED
#$t9 = 0xAFADA007

#Qual seria o valor de $s6 após a
#execução das instruções abaixo?
#sll $t1, $t8, 4
#and $t1, $t1, $t9
#ori $s6, $t1, 20

.text 
.globl main # Define o início do código do usuário

main:
li $t8, 0x00BADBED
li $t9, 0xAFADA007
				#começo em 0x00BADBED
sll $t1, $t8, 16 #shift left resulta em 0x0bada000
sll $t2, $t8, 4 #empurra 1 em hexa para o lado
and $t1, $t1, $t9
ori $s6, $t1, 20 #resultará em 0x0bada014


#####################################################################
# EXERCÍCIO 6
#####################################################################
# Defina um Array Conta com 10 posições e inicialize ele com
# valores inteiros aleatórios entre 0 e 100.
# Escreva o código em assembly do MIPS que coloca no registrador
# $s0 a média das posições Conta[3] e Conta[7].

.data
Conta: .word 0, 1, 2, 100, 4, 5, 6, 50, 8, 9  # Array Conta com 10 posições

.text # Define o início do Text Segment
.globl main # Define o início do código do usuário

main:
li $t4, 2
la $s2, Conta
		# por padrão são 4 bits
lw $t0, 12($s2) # endereço 12 (4 * posição) | posição = 3
lw $t1, 28($s2) # posição 28 (4 * posição) | posição = 7
		
add $s0, $t0, $t1 #salva no $s0 a soma de $t0 + $t1

div $s0,$t4 #divide $s0 por 2
mflo $s0 #move o resultado da divisão para o registrador $s0


#####################################################################
# EXERCÍCIO 7
#####################################################################
#Faça o papel do compilador para o seguinte código
#	– for ( i = 0 ; i < y ; i ++ ) x *= z;
#	• Considere que existe uma pseudoinstrução mult
#	que é composta de várias instruções mais simples
#	– mult $t0, $t1, $t2 -> $t0 = $t1 * $t2

.data
i: .word 0 #i == 0
y: .word 4
x: .word 6
z: .word 2

.text
main:
#é possível não utilizar a .data e usar os li para carregar os
#endereços diretamente
    la $t0, i
    la $t1, y
    la $t2, x
    la $t3, z

    lw $s0, 0($t0)
    lw $s1, 0($t1)
    lw $s2, 0($t2)
    lw $s3, 0($t3)

for:
    bge $s0, $s1, end_for   
    mult $s2, $s3           
    mflo $s2                
    addi $s0, $s0, 1        
    j for                    

end_for:
    sw $s2, 0($t2)       #dados os valores, esperasse resultar em 96
    			 #no caso, 60 em hex.   


#####################################################################
# EXERCÍCIO 8
#####################################################################
#• Que construção de iteração é usada abaixo
#e o que faz o código?
#move $t0, $zero
#loop: sll $t1, $t0, 2
#add $t2, $a0, $t1
#sw $zero, 0($t2)
#addi $t0, $t0, 1
#slt $t3, $t0, $a1
#bne $t3, $zero, loop


.data
Vetor: .word 830224, 12041, 213141

#$a0 = endereço vetor
#$a1 = tamanho de vetor

.text
la $a0, Vetor
li $a1, 3

move $t0, $zero  
loop:
sll $t1, $t0, 2 
add $t2, $a0, $t1 
sw $zero, 0($t2) 
addi $t0, $t0, 1  
slt $t3, $t0, $a1
bne $t3, $zero, loop

#o código acima é um loop
#e é responsável por zerar o vetor inserido.